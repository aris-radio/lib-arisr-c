/**
 * @attention

    Copyright (C) 2025  - ARIS Alliance

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

 **********************************************************************************
*/

#ifndef MAIN_TEST_H
#define MAIN_TEST_H

#include "lib_arisr_base.h"

// Deine to avoid writing null code
#define ARISR_TEST_NULL_CTRL 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ARISR_MSG_DATA_0, 0

#define ARISR_ID   \
{ 0x00, 0x11, 0x22, 0x33 }

#define ARISR_ARIS \
{ 0x41, 0x52, 0x49, 0x53 }

#define ARISR_MSG_KEY       \
{ 0x00, 0x11, 0x22, 0x33,   \
  0x44, 0x55, 0x66, 0x77,   \
  0x88, 0x99, 0xAA, 0xBB,   \
  0xCC, 0xDD, 0xEE, 0xFF    \
}

#define ARISR_MSG_KEY_BLANK \
{ 0x00, 0x00, 0x00, 0x00,   \
  0x00, 0x00, 0x00, 0x00,   \
  0x00, 0x00, 0x00, 0x00,   \
  0x00, 0x00, 0x00, 0x00    \
}

static const ARISR_UINT8 ARISR_MSG_DATA_0[] = { 
    0x00 
};
static const ARISR_UINT8 ARISR_MSG_DATA_1[] = { 
    0x00, 0x11, 0x22, 0x33, 0x00, 0x11, 0x22, 0x33 
};
static const ARISR_UINT8 ARISR_MSG_DATA_2[] = { 
    0x00, 0x11, 0x22, 0x33, 0x00, 0x11, 0x22, 0x33, 0x00, 0x11, 
    0x22, 0x33, 0x00, 0x11, 0x22 
};
static const ARISR_UINT8 ARISR_MSG_DATA_3[] = { 
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
    0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 
    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 
    0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
    0x28
};

/**
 *  ID = 0x00 0x11 0x22 0x33
 *  CTRL1 = {
 *      version: 1,
 *      destinations: 0,
 *      option: 0,
 *      from: 0,
 *      sequence: 1,
 *      retry: 0,
 *      more_data: 1,
 *      identifier: 110,
 *      more_header: 0
 *  }
 */
static const ARISR_UINT8 ARISR_MSG_RAW_1[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x00, 0x05, 0xDC,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x5C, 0x18,
    0x00, 0x11, 0x22, 0x33,
};

/**
 *  ID = 0x00 0x11 0x22 0x33
 *  CTRL1 = {
 *      version: 1,
 *      destinations: 0,
 *      option: 0,
 *      from: 0,
 *      sequence: 1,
 *      retry: 0,
 *      more_data: 1,
 *      identifier: 110,
 *      more_header: 1
 *  }
 * 
 * CTRL2 = {
 *      data_length: 1,
 *      feature: 0,
 *      neg_answer: 0,
 *      freq_switch: 0
 * }
 * 
 * DATA = 0x00, 0x11, 0x22, 0x33, 0x00, 0x11, 0x22, 0x33
 */
static const ARISR_UINT8 ARISR_MSG_RAW_2[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x00, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x02, 0x00, 0x00, 0x00,
    0x2D, 0x41,
    0X06, 0x4F, 0x78, 0x11, 0x9D, 0x45,
    0xAA, 0x4F, 0x9D, 0x91, 0x8D, 0xDA,
    0x90, 0xD5, 0xDE, 0x8F,
    0x9B, 0x2E,
    0x00, 0x11, 0x22, 0x33,
};

/**
 *  ID = 0x00 0x11 0x22 0x33
 *  CTRL1 = {
 *      version: 1,
 *      destinations: 2,
 *      option: 0,
 *      from: 0,
 *      sequence: 1,
 *      retry: 0,
 *      more_data: 1,
 *      identifier: 110,
 *      more_header: 1
 *  }
 * 
 * CTRL2 = {
 *      data_length: 1,
 *      feature: 0,
 *      neg_answer: 0,
 *      freq_switch: 0
 * }
 * 
 * DATA = 0x00, 0x11, 0x22, 0x33, 0x00, 0x11, 0x22, 0x33
 */
static const ARISR_UINT8 ARISR_MSG_RAW_3[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x20, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x02, 0x00, 0x00, 0x00,
    0x4A, 0xCA,
    0X06, 0x4F, 0x78, 0x11, 0x9D, 0x45,
    0xAA, 0x4F, 0x9D, 0x91, 0x8D, 0xDA,
    0x90, 0xD5, 0xDE, 0x8F,
    0x9B, 0x2E,
    0x00, 0x11, 0x22, 0x33,
};

/**
 *  ID = 0x00 0x11 0x22 0x33
 *  CTRL1 = {
 *      version: 1,
 *      destinations: 2,
 *      option: 0,
 *      from: 0,
 *      sequence: 1,
 *      retry: 0,
 *      more_data: 1,
 *      identifier: 110,
 *      more_header: 1
 *  }
 * 
 * CTRL2 = {
 *      data_length: 0,
 *      feature: 0,
 *      neg_answer: 0,
 *      freq_switch: 0
 * }
 * 
 */
static const ARISR_UINT8 ARISR_MSG_RAW_4[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x20, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x00, 0x00, 0x00, 0x00,
    0xA7, 0xA2,
    0x00, 0x11, 0x22, 0x33,
};

// Wrong ID
static const ARISR_UINT8 ARISR_MSG_RAW_5[] =
{
    0x00, 0x00, 0x00, 0x00,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x20, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x00, 0x00, 0x00, 0x00,
    0xA7, 0xA2,
    0x00, 0x11, 0x22, 0x33,
};

// Wrong CRC Header
static const ARISR_UINT8 ARISR_MSG_RAW_6[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x00, 0x05, 0xDC,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x01, 0x01,
    0x00, 0x11, 0x22, 0x33,
};

// Wrong CRC Data
static const ARISR_UINT8 ARISR_MSG_RAW_7[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x20, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x02, 0x00, 0x00, 0x00,
    0x4A, 0xCA,
    0xB2, 0x5F, 0x8D, 0x1A, 0x74, 0xC0,
    0xBE, 0xE3, 0xD1, 0x8A, 0x4B, 0x7C, 
    0x2F, 0x5D, 0x9E, 0x0C,
    0x01, 0x01,
    0x00, 0x11, 0x22, 0x33,
};

// Not same ARIS (Not same AES Key)
static const ARISR_UINT8 ARISR_MSG_RAW_8[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x50, 0x41, 0x53,
    0x10, 0x00, 0x05, 0xDC,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x01, 0x01,
    0x00, 0x11, 0x22, 0x33,
};

// Not same END
static const ARISR_UINT8 ARISR_MSG_RAW_9[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x00, 0x05, 0xDC,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x5C, 0x18,
    0x33, 0x22, 0x11, 0x00,
};

// Wrong key
static const ARISR_UINT8 ARISR_MSG_RAW_10[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0x20, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x02, 0x00, 0x00, 0x00,
    0x4A, 0xCA,
    0x68, 0x3C, 0xB2, 0x89, 0xC7, 0x0E,
    0xB0, 0xD9, 0x2E, 0x18, 0x04, 0xEA,
    0xD7, 0x46, 0xA1, 0x21,
    0xBD, 0x72,
    0x00, 0x11, 0x22, 0x33,
};


// Complete message without error
static const ARISR_UINT8 ARISR_MSG_RAW_11[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x40, 0x51, 0x48, 0x52,
    0x10, 0xF0, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x00, 0x1C, 0x4F, 0x7D, 0x58, 0xA3,
    0x00, 0x1D, 0x5A, 0x9E, 0x62, 0xB4,
    0x00, 0x1E, 0x6B, 0xAF, 0x71, 0xC5,
    0x00, 0x1F, 0x7C, 0xB0, 0x82, 0xD6,
    0x00, 0x20, 0x8D, 0xC1, 0x93, 0xE7,
    0x00, 0x21, 0x9E, 0xD2, 0xA4, 0xF8,
    0x00, 0x22, 0xAF, 0xE3, 0xB5, 0x09,
    0x00, 0x23, 0xB0, 0xF4, 0xC6, 0x1A,
    0x00, 0x24, 0xC1, 0x05, 0xD7, 0x2B,
    0x00, 0x25, 0xD2, 0x16, 0xE8, 0x3C,
    0x00, 0x26, 0xE3, 0x27, 0xF9, 0x4D,
    0x00, 0x27, 0xF4, 0x38, 0x0A, 0x5E,
    0x00, 0x28, 0x05, 0x49, 0x1B, 0x6F,
    0x06, 0x00, 0x00, 0x00,
    0xA3, 0xA7,
    0x27, 0x9F, 0xB7, 0x4A, 0x75, 0x72, 0x13, 0x5E, 0x8F, 0x9B, 0x8E, 0xF6, 
    0xD1, 0xEE, 0xE0, 0x03, 0xE3, 0xBC, 0x2C, 0x7D, 0x8E, 0xC9, 0xF4, 0x62, 
    0x13, 0x8B, 0x84, 0x53, 0xA9, 0x40, 0x3F, 0x5D, 0x13, 0x51, 0x0C, 0xD0, 
    0x97, 0x1E, 0x61, 0x0C, 0x46, 0x94, 0x16, 0xC8, 0x38, 0x89, 0x0B, 0x71,
    0x17, 0xCD,
    0x00, 0x11, 0x22, 0x33,
};


// Complete message without error with default key
static const ARISR_UINT8 ARISR_MSG_RAW_12[] =
{
    0x00, 0x11, 0x22, 0x33,
    0x41, 0x52, 0x49, 0x53,
    0x20, 0xF0, 0x05, 0xDD,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8,
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x00, 0x1C, 0x4F, 0x7D, 0x58, 0xA3,
    0x00, 0x1D, 0x5A, 0x9E, 0x62, 0xB4,
    0x00, 0x1E, 0x6B, 0xAF, 0x71, 0xC5,
    0x00, 0x1F, 0x7C, 0xB0, 0x82, 0xD6,
    0x00, 0x20, 0x8D, 0xC1, 0x93, 0xE7,
    0x00, 0x21, 0x9E, 0xD2, 0xA4, 0xF8,
    0x00, 0x22, 0xAF, 0xE3, 0xB5, 0x09,
    0x00, 0x23, 0xB0, 0xF4, 0xC6, 0x1A,
    0x00, 0x24, 0xC1, 0x05, 0xD7, 0x2B,
    0x00, 0x25, 0xD2, 0x16, 0xE8, 0x3C,
    0x00, 0x26, 0xE3, 0x27, 0xF9, 0x4D,
    0x00, 0x27, 0xF4, 0x38, 0x0A, 0x5E,
    0x00, 0x28, 0x05, 0x49, 0x1B, 0x6F,
    0x06, 0x00, 0x00, 0x00,
    0xD5, 0xF1,
    0x7A, 0xCA, 0x0F, 0xD9, 0xBC, 0xD6, 0xEC, 0x7C, 0x9F, 0x97, 0x46, 0x66,
    0x16, 0xE6, 0xA2, 0x82, 0x35, 0x8D, 0x5B, 0x59, 0xAD, 0xB6, 0x5D, 0x04,
    0x10, 0x76, 0x76, 0x58, 0x6F, 0x47, 0x34, 0x46, 0xC7, 0x22, 0xF3, 0xA4,
    0x7A, 0x27, 0x5F, 0x0D, 0xF9, 0x66, 0xBF, 0xCF, 0xA0, 0xCB, 0x35, 0x2D,
    0xD0, 0x1F,
    0x00, 0x11, 0x22, 0x33,
};

typedef struct {
    const ARISR_UINT8 *msg;
    ARISR_UINT32 length;
    ARISR_ERR expected_recv;
    ARISR_UINT8 version;
    ARISR_UINT8 destinations;
    ARISR_UINT8 option;
    ARISR_UINT8 from;
    ARISR_UINT8 sequence;
    ARISR_UINT8 retry;
    ARISR_UINT8 more_data;
    ARISR_UINT8 identifier;
    ARISR_UINT8 more_header;
    ARISR_UINT32 data_length;
    ARISR_UINT8 feature;
    ARISR_UINT8 neg_answer;
    ARISR_UINT8 freq_switch;
    const ARISR_UINT8 *data_plain;
    ARISR_ERR expected_unpack;
} ARISR_TEST_ELEMENT_UNPACK;


static const ARISR_TEST_ELEMENT_UNPACK ARISR_RAW_TEST_UNPACK[] = {
    { ARISR_MSG_RAW_1, sizeof(ARISR_MSG_RAW_1), kARISR_OK, 1, 0, 0, 0, 1, 0, 1, 110, 0, 0, 0, 0, 0, ARISR_MSG_DATA_0, kARISR_OK },
    { ARISR_MSG_RAW_2, sizeof(ARISR_MSG_RAW_2), kARISR_OK, 1, 0, 0, 0, 1, 0, 1, 110, 1, sizeof(ARISR_MSG_DATA_1), 0, 0, 0, ARISR_MSG_DATA_1, kARISR_OK },
    { ARISR_MSG_RAW_3, sizeof(ARISR_MSG_RAW_3), kARISR_OK, 1, 2, 0, 0, 1, 0, 1, 110, 1, sizeof(ARISR_MSG_DATA_1), 0, 0, 0, ARISR_MSG_DATA_1, kARISR_OK },
    { ARISR_MSG_RAW_4, sizeof(ARISR_MSG_RAW_4), kARISR_OK, 1, 2, 0, 0, 1, 0, 1, 110, 1, 0, 0, 0, 0, ARISR_MSG_DATA_1, kARISR_OK },
    { ARISR_MSG_RAW_5, sizeof(ARISR_MSG_RAW_5), kARISR_ERR_NOT_SAME_ID, ARISR_TEST_NULL_CTRL },
    { ARISR_MSG_RAW_6, sizeof(ARISR_MSG_RAW_6), kARISR_ERR_NOT_SAME_CRC_HEADER, ARISR_TEST_NULL_CTRL },
    { ARISR_MSG_RAW_7, sizeof(ARISR_MSG_RAW_7), kARISR_ERR_NOT_SAME_CRC_DATA, ARISR_TEST_NULL_CTRL },
    { ARISR_MSG_RAW_8, sizeof(ARISR_MSG_RAW_8), kARISR_ERR_NOT_SAME_ARIS, ARISR_TEST_NULL_CTRL },
    { ARISR_MSG_RAW_9, sizeof(ARISR_MSG_RAW_9), kARISR_ERR_NOT_SAME_END, ARISR_TEST_NULL_CTRL },
    { ARISR_MSG_RAW_10, sizeof(ARISR_MSG_RAW_10), kARISR_OK, 1, 2, 0, 0, 1, 0, 1, 110, 1, sizeof(ARISR_MSG_DATA_2), 0, 0, 0, ARISR_MSG_DATA_2, kARISR_ERR_INVALID_PADDING },
    { ARISR_MSG_RAW_11, sizeof(ARISR_MSG_RAW_11), kARISR_OK, 1, 15, 0, 0, 1, 0, 1, 110, 1, sizeof(ARISR_MSG_DATA_3), 0, 0, 0, ARISR_MSG_DATA_3, kARISR_OK },
};



// Test for ARISR_proto_pack

/*
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
*/
static const ARISR_UINT48 ARISR_DESTINARIONS_1[] = {
    { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    { 0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6 }
};

/*
    0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E,
    0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6,
    0x00, 0x1C, 0x4F, 0x7D, 0x58, 0xA3,
    0x00, 0x1D, 0x5A, 0x9E, 0x62, 0xB4,
    0x00, 0x1E, 0x6B, 0xAF, 0x71, 0xC5,
    0x00, 0x1F, 0x7C, 0xB0, 0x82, 0xD6,
    0x00, 0x20, 0x8D, 0xC1, 0x93, 0xE7,
    0x00, 0x21, 0x9E, 0xD2, 0xA4, 0xF8,
    0x00, 0x22, 0xAF, 0xE3, 0xB5, 0x09,
    0x00, 0x23, 0xB0, 0xF4, 0xC6, 0x1A,
    0x00, 0x24, 0xC1, 0x05, 0xD7, 0x2B,
    0x00, 0x25, 0xD2, 0x16, 0xE8, 0x3C,
    0x00, 0x26, 0xE3, 0x27, 0xF9, 0x4D,
    0x00, 0x27, 0xF4, 0x38, 0x0A, 0x5E,
    0x00, 0x28, 0x05, 0x49, 0x1B, 0x6F,
*/
static const ARISR_UINT48 ARISR_DESTINARIONS_2[] = {
    { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    { 0x00, 0x1B, 0x63, 0x84, 0x45, 0xE6 },
    { 0x00, 0x1C, 0x4F, 0x7D, 0x58, 0xA3 },
    { 0x00, 0x1D, 0x5A, 0x9E, 0x62, 0xB4 },
    { 0x00, 0x1E, 0x6B, 0xAF, 0x71, 0xC5 },
    { 0x00, 0x1F, 0x7C, 0xB0, 0x82, 0xD6 },
    { 0x00, 0x20, 0x8D, 0xC1, 0x93, 0xE7 },
    { 0x00, 0x21, 0x9E, 0xD2, 0xA4, 0xF8 },
    { 0x00, 0x22, 0xAF, 0xE3, 0xB5, 0x09 },
    { 0x00, 0x23, 0xB0, 0xF4, 0xC6, 0x1A },
    { 0x00, 0x24, 0xC1, 0x05, 0xD7, 0x2B },
    { 0x00, 0x25, 0xD2, 0x16, 0xE8, 0x3C },
    { 0x00, 0x26, 0xE3, 0x27, 0xF9, 0x4D },
    { 0x00, 0x27, 0xF4, 0x38, 0x0A, 0x5E },
    { 0x00, 0x28, 0x05, 0x49, 0x1B, 0x6F }
};

/**
 *  ARISR_MSG_RAW_1
 */
static const ARISR_CHUNK ARISR_MSG_1 =
{
    .id = ARISR_ID,
    .aris = ARISR_ARIS,
    .ctrl = {
        .version = 1,
        .destinations = 0,
        .option = 0,
        .from = 0,
        .sequence = 1,
        .retry = 0,
        .more_data = 1,
        .identifier = 110,
        .more_header = 0
    },
    .origin = { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    .destinationA = { 0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8 }
};

/**
 *  ARISR_MSG_RAW_2
 */
static const ARISR_CHUNK ARISR_MSG_2 = 
{
    .id = ARISR_ID,
    .aris = ARISR_ARIS,
    .ctrl = {
        .version = 1,
        .destinations = 0,
        .option = 0,
        .from = 0,
        .sequence = 1,
        .retry = 0,
        .more_data = 1,
        .identifier = 110,
        .more_header = 1
    },
    .origin = { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    .destinationA = { 0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8 },
    .ctrl2 = {
        .data_length = sizeof(ARISR_MSG_DATA_1),
        .feature = 0,
        .neg_answer = 0,
        .freq_switch = 0
    },
    .data = (ARISR_UINT8 *) ARISR_MSG_DATA_1
};

/**
 *  ARISR_MSG_RAW_3
 */
static const ARISR_CHUNK ARISR_MSG_3 =
{
    .id = ARISR_ID,
    .aris = ARISR_ARIS,
    .ctrl = {
        .version = 1,
        .destinations = 2,
        .option = 0,
        .from = 0,
        .sequence = 1,
        .retry = 0,
        .more_data = 1,
        .identifier = 110,
        .more_header = 1
    },
    .origin = { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    .destinationA = { 0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8 },
    .ctrl2 = {
        .data_length = sizeof(ARISR_MSG_DATA_1),
        .feature = 0,
        .neg_answer = 0,
        .freq_switch = 0
    },
    // ARISR_UINT48 *destinationsB;        // ... n (destinations)*6 Bytes
    .destinationsB = (ARISR_UINT48 *) ARISR_DESTINARIONS_1,
    .data = (ARISR_UINT8 *) ARISR_MSG_DATA_1
};

/**
 *  ARISR_MSG_RAW_4
 */
static const ARISR_CHUNK ARISR_MSG_4 =
{
    .id = ARISR_ID,
    .aris = ARISR_ARIS,
    .ctrl = {
        .version = 1,
        .destinations = 2,
        .option = 0,
        .from = 0,
        .sequence = 1,
        .retry = 0,
        .more_data = 1,
        .identifier = 110,
        .more_header = 1
    },
    .origin = { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    .destinationA = { 0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8 },
    .ctrl2 = {
        .data_length = 0,
        .feature = 0,
        .neg_answer = 0,
        .freq_switch = 0
    },
    .destinationsB = (ARISR_UINT48 *) ARISR_DESTINARIONS_1
};

// Complete message without error
/**
 * ARISR_MSG_RAW_11
 */
static const ARISR_CHUNK ARISR_MSG_11 =
{
    .id = ARISR_ID,
    .aris = ARISR_ARIS,
    .ctrl = {
        .version = 1,
        .destinations = 15,
        .option = 0,
        .from = 0,
        .sequence = 1,
        .retry = 0,
        .more_data = 1,
        .identifier = 110,
        .more_header = 1
    },
    .origin = { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    .destinationA = { 0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8 },
    .ctrl2 = {
        .data_length = sizeof(ARISR_MSG_DATA_3),
        .feature = 0,
        .neg_answer = 0,
        .freq_switch = 0
    },
    .destinationsB = (ARISR_UINT48 *) ARISR_DESTINARIONS_2,
    .data = (ARISR_UINT8 *) ARISR_MSG_DATA_3
};

// Complete message without error with default key
/**
 * ARISR_MSG_RAW_12
 */
static const ARISR_CHUNK ARISR_MSG_12 =
{
    .id = ARISR_ID,
    .aris = ARISR_ARIS,
    .ctrl = {
        .version = 2,
        .destinations = 15,
        .option = 0,
        .from = 0,
        .sequence = 1,
        .retry = 0,
        .more_data = 1,
        .identifier = 110,
        .more_header = 1
    },
    .origin = { 0x00, 0x1A, 0x2B, 0x3C, 0x4D, 0x5E },
    .destinationA = { 0xFA, 0x16, 0x3E, 0x2F, 0xEC, 0xA8 },
    .ctrl2 = {
        .data_length = sizeof(ARISR_MSG_DATA_3),
        .feature = 0,
        .neg_answer = 0,
        .freq_switch = 0
    },
    .destinationsB = (ARISR_UINT48 *) ARISR_DESTINARIONS_2,
    .data = (ARISR_UINT8 *) ARISR_MSG_DATA_3
};


typedef struct {
    const ARISR_CHUNK *chunk;
    const ARISR_UINT8 *expected_raw;
    const ARISR_UINT32 expected_length;
} ARISR_TEST_ELEMENT_PACK;


static const ARISR_TEST_ELEMENT_PACK ARISR_RAW_TEST_PACK[] = {
    { &ARISR_MSG_1, ARISR_MSG_RAW_1, sizeof(ARISR_MSG_RAW_1) },
    { &ARISR_MSG_2, ARISR_MSG_RAW_2, sizeof(ARISR_MSG_RAW_2) },
    { &ARISR_MSG_3, ARISR_MSG_RAW_3, sizeof(ARISR_MSG_RAW_3) },
    { &ARISR_MSG_4, ARISR_MSG_RAW_4, sizeof(ARISR_MSG_RAW_4) },
    { &ARISR_MSG_11, ARISR_MSG_RAW_11, sizeof(ARISR_MSG_RAW_11) }
};

#endif

/* COPYRIGHT ARIS Alliance */